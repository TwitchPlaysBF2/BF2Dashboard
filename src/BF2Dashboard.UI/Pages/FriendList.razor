@page "/friends"
@using BF2Dashboard.UI.Store.FriendList
@using BF2Dashboard.UI.Store
@inherits FluxorComponent
@inject IDispatcher _dispatcher
@inject IState<FriendListState> _friendListState
@inject IState<LoadingState> _loadingState

<h3><span class="oi oi-people" aria-hidden="true"></span> Friends</h3>
@if (_friendListState.Value.OnlineFriendList == null)
{
    <LoadingSpinner/>
}
else
{
    <span>Online:</span>
    <div class="row p-2 ms-4">
        <ul style="list-style-type: none;">
            @foreach (var friend in _friendListState.Value.OnlineFriendList)
            {
                <li>
                    <i class="bi bi-circle-fill" style="color: green; font-size: 11pt;"></i>
                    @friend.DisplayName
                    <span style="font-size: 10pt; color: #767676">
                        @friend.ServerInfo.MapName @@ @friend.ServerInfo.ServerName 
                        (@friend.ServerInfo.CurrentPlayerCountWithoutBots/@friend.ServerInfo.MaxPlayerCount)
                        @if (friend.ServerInfo.JoinLink != null)
                        {
                            <a role="button" title="Join server (requires joinme.click launcher)" href="@friend.ServerInfo.JoinLink" class="btn btn-dark btn-sm mx-2">Join</a>
                        }
                    </span>
                    <i class="btn btn-sm btn-outline-warning bi bi-person-dash grow" @onclick="() => RemoveFriend(friend)" title="Remove friend"></i>
                </li>
            }
        </ul>
    </div>
}
@if (_friendListState.Value.OfflineFriendList != null)
{
    <span>Offline:</span>
    <div class="row p-2 ms-4">
        <ul style="list-style-type: none;">
            @foreach (var friend in _friendListState.Value.OfflineFriendList)
            {
                <li style="opacity: .5">
                    <i class="bi bi-circle-fill" style="color: #767676; font-size: 11pt;"></i>
                    @friend.DisplayName
                    <i class="btn btn-sm btn-outline-warning bi bi-person-dash grow" @onclick="() => RemoveFriend(friend)" title="Remove friend"></i>
                </li>
            }
        </ul>
    </div>
}

@code {

    private bool _isServerDataLoaded = false;

    protected override void OnInitialized()
    {
        if (!_isServerDataLoaded)
        {
            _dispatcher.Dispatch(new InitializeServerListsAction());
            _isServerDataLoaded = true;
        }

        base.OnInitialized();
    }

    private void RemoveFriend(FriendModel friend)
    {
        if (friend.Player != null)
            friend.Player.IsFriend = false;

        _dispatcher.Dispatch(new RemoveFriendAction(friend.DisplayName));
    }

}