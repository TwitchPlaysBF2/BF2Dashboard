@page "/alerts"
@using BF2TV.Frontend.Pages.Alerts
@using BF2TV.Frontend.Store
@using BF2TV.Domain.Services
@inherits FluxorComponent
@inject IState<AlertStore.State> State
@inject IEnvironment _environment
@inject IDispatcher _dispatcher
@inject IPeriodicRefresher _periodicRefresher
@inject IActivePlayerLookupService _activePlayerLookupService

@if (_environment.IsApp())
{
    <h3>Alerts for @_activePlayerName</h3>
}
else
{
    <h3>Alerts</h3>
}

<div class="mb-5">
    <h5>History</h5>
    <AlertHistory/>
</div>
<div>
    <h5>Conditions</h5>
    <ul>
        @foreach (var condition in State.Value.FriendIsOnServerConditions)
        {
            <li>@condition.ConditionId</li>
        }
    </ul>
</div>

@code {

    private bool _isInitialized = false;
    private string? _activePlayerName;

    protected override async Task OnInitializedAsync()
    {
        if (!_isInitialized)
        {
            _dispatcher.Dispatch(new InitializeServerListsAction());
            _dispatcher.Dispatch(new AlertStore.Actions.FriendIsOnServerConditions.StartLoading());
            _periodicRefresher.UpdateSetting(true);
            _isInitialized = true;

            if (_environment.IsApp())
                _activePlayerName = _activePlayerLookupService.GetPlayer()?.ToString();
        }
        await base.OnInitializedAsync();
    }

}