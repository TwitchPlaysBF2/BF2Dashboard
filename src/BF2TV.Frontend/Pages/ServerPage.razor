@page "/servers/{ServerIdAndPort}"
@using Newtonsoft.Json
@using BF2TV.Domain.BattlefieldApi
@using BF2TV.Domain.GeoApi
@using BF2TV.Domain.Services
@using BF2TV.Frontend.Store.ServerDetail
@inject IDispatcher _dispatcher
@inject IState<ServerDetailState> _serverDetailState
@inject IState<ServerGeoLocationState> _serverGeoLocationState
@inject DiscordUrlParser _discordUrlParser
@inherits FluxorComponent

<a role="button" class="btn btn-dark" href="/">
    <i class="bi bi-arrow-return-left icon-in-a-button-big"></i> Back to dashboard
</a>
<a role="button" class="btn btn-dark ms-1" title="Refresh server data" @onclick="LoadData">
    <i class="bi bi-arrow-clockwise icon-in-a-button-big"></i> Refresh
</a>
@if (Server?.JoinLink != null)
{
    <a role="button" title="Join Server (requires joinme.click/download)" href="@Server.JoinLink" class="btn btn-primary btn-dark ms-2">
        <i class="bi bi-play-circle icon-in-a-button-big"></i> Join Server now
    </a>
}
@if (Server?.SponsorText != null && _discordUrlParser.TryGetDiscordUrl(Server.SponsorText, out var discordUrl))
{
    <a role="button" class="btn btn-dark ms-2" target="_blank" href="@discordUrl">
        <i class="bi bi-discord icon-in-a-button-big"></i> Join Discord
    </a>
}
@if (Server?.Battlerecorder == true && !string.IsNullOrWhiteSpace(Server.DemoIndex) && Uri.IsWellFormedUriString(Server.DemoIndex, UriKind.Absolute))
{
    <a role="button" class="btn btn-dark ms-2" target="_blank" href="@Server.DemoIndex">
        <i class="bi bi-camera-video icon-in-a-button-big"></i> Demos
    </a>
}

<div class="m-5">
@if (Server == null && !_serverDetailState.Value.IsLoading)
{
    <b>Error loading server details. See console.</b>
}
@if (Server != null)
{
    <div class="row">
        <div class="col-xxl-6">
            @if (Server.NumPlayersWithoutBots > 0)
            {
                <div class="row text-center">
                    <div class="col">
                        <h3>
                            @Server.Name 
                            @if (Server.MaxPlayers != null)
                            {
                                <span class="text-secondary"> (@Server.NumPlayersWithoutBots/@Server.MaxPlayers)</span>
                            }
                        </h3>
                    </div>
                </div>
                <div class="row text-center">
                    <div class="col">
                        @Server.MapName <span class="text-secondary" title="Map Size (16/32/64)">(@($"x{Server.MapSize}"))</span>
                    </div>
                </div>
                <div class="row m-5 text-center">
                    <div class="col ps-5">
                        <!-- Scoreboard -->
                        <table id="scoreboard" class="table table-sm table-hover table-borderless">
                            <thead>
                            <tr>
                                <th scope="col" class="align-middle text-truncate">@Server.Team1 Player</th>
                                <th style="width: 5%;" scope="col" class="align-middle text-center">Score</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var player in Server.Players
                                .Where(p => p.IsHuman)
                                .Where(p => p.TeamLabel == Server.Team1)
                                .OrderByDescending(p => p.Score)
                                .ToList())
                            {
                                <tr>
                                    <td>
                                        <a title="Open BF2Hub profile" class="link-light text-nowrap text-decoration-none" target="_blank"
                                           href="@player.ProfileUrl">
                                            <span style="color: @(player.IsFriend ? "darkseagreen" : "")">@player.FullName</span>
                                        </a>
                                    </td>
                                    <td class="text-center">
                                        @player.Score
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="col ps-5">
                        <!-- Scoreboard -->
                        <table id="scoreboard" class="table table-sm table-hover table-borderless">
                            <thead>
                            <tr>
                                <th scope="col" class="align-middle text-truncate">@Server.Team2 Player</th>
                                <th style="width: 5%;" scope="col" class="align-middle text-center">Score</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var player in Server.Players
                                .Where(p => p.IsHuman)
                                .Where(p => p.TeamLabel == Server.Team2)
                                .OrderByDescending(p => p.Score)
                                .ToList())
                            {
                                <tr>
                                    <td>
                                        <a title="Open BF2Hub profile" class="link-light text-nowrap text-decoration-none" target="_blank"
                                           href="@player.ProfileUrl">
                                            <span style="color: @(player.IsFriend ? "darkseagreen" : "")">@player.FullName</span>
                                        </a>
                                    </td>
                                    <td class="text-center">
                                        @player.Score
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <div class="m-4 text-center">
                @if (!string.IsNullOrWhiteSpace(Server.CommunityLogoUrl))
                {
                    <img src="@Server.CommunityLogoUrl" alt="Server" style="max-width: 100%;"/>
                    <br/>
                }
                @if (Uri.IsWellFormedUriString(Server.SponsorText, UriKind.Absolute))
                {
                    <a href="@Server.SponsorText" target="_blank">@Server.SponsorText</a>
                }
                else
                {
                    <div class="m-2">@Server.SponsorText</div>
                }
            </div>
        </div>
        <div class="col-xxl-6">
            <div class="mt-3 mx-3 pb-3 text-center">
                <h3>Server Details</h3>
            </div>
            <div class="pt-2 mx-5 px-5 text-center">
                <div>
                    Current Map: @Server.MapName
                </div>
                <div>
                    Current Players (excluding bots): @Server.NumPlayersWithoutBots
                </div>
                <div>
                    Maximum Players: @Server.MaxPlayers
                </div>
                <div>
                    Reserved Slots: @Server.ReservedSlots
                </div>
                <div>
                    Ranked: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.Ranked" disabled>
                </div>
                <div>
                    Password: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.Password" disabled>
                </div>
                <div>
                    Friendly Fire: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.Friendlyfire" disabled>
                </div>
                <div>
                    Autobalance: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.Autobalance" disabled>
                </div>
                <div>
                    Allow Global Unlocks: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.GlobalUnlocks" disabled>
                </div>
                <div>
                    No Vehicles: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.NoVehicles" disabled>
                </div>
                <div>
                    Teamkill Mode: @Server.Tkmode
                </div>
                <div>
                    Map Size: @Server.MapSize
                </div>
                <div>
                    Rounds per Map: @Server.RoundsPerMap
                </div>
                <div>
                    Spawn Time: @Server.Spawntime
                </div>
                <div>
                    Time Limit: @Server.Timelimit
                </div>
                <div>
                    Ticket Ratio: @Server.Ticketratio
                </div>
                <div>
                    Team Ratio: @Server.Teamratio
                </div>
                <div>
                    Game Variant: @Server.GameVariant
                </div>
                <div>
                    Game Mode: @Server.GameType
                </div>
                <div>
                    Operating System: @Server.Os
                </div>
                <div>
                    Server FPS: @Server.Fps
                </div>
                <div>
                    Server IP: <span class="user-select-all">@Server.Ip</span>
                </div>
                <div>
                    Server Port: <span class="user-select-all">@Server.Port</span>
                </div>
                <div>
                    Dedicated Server: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.Dedicated" disabled>
                </div>
                <div>
                    VoIP: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.Voip" disabled>
                </div>
                <div>
                    Server Continent: @(ServerLocation?.ContinentCode ?? "-")
                </div>
                <div>
                    Server Country: @(ServerLocation?.CountryName ?? "-")
                </div>
                <div>
                    Server City: @(ServerLocation?.City ?? "-")
                </div>
                <div>
                    Battlerecorder enabled: <input class="form-check-input state-info-box" type="checkbox" value="" checked="@Server.Battlerecorder" disabled>
                </div>
                <div>
                    Battlerecorder URL: <a href="@Server.DemoDownload" target="_blank">@Server.DemoDownload</a>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-5">
        <div class="accordion accordion-flush bg-dark" id="mainAccordion">
            <div class="accordion-item">
                <div class="accordion-header">
                    <div class="col">
                        <button class="accordion-button collapsed btn" type="button" data-bs-toggle="collapse" aria-expanded="false" data-bs-target="#collapsed_raw">
                            View raw server data
                        </button>
                    </div>
                    <div id="collapsed_raw" class="accordion-collapse collapse">
                        <div class="accordion-body ps-5 pe-3 pb-5">
                            <pre>
                                @JsonConvert.SerializeObject(Server, Formatting.Indented)
                            </pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
</div>

@code {

    Server? Server => _serverDetailState.Value.LoadedServer;
    GeoLocation? ServerLocation => _serverGeoLocationState.Value.GeoLocation;

    [Parameter]
    public string ServerIdAndPort { get; set; }

    protected override void OnInitialized()
    {
        LoadData();
        base.OnInitialized();
    }

    private void LoadData()
    {
        _dispatcher.Dispatch(new BeginLoadingServerDetailAction {IpAndPort = ServerIdAndPort});
    }

}