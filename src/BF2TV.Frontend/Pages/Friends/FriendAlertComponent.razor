@using BF2TV.Frontend.Store.FriendList
@using BF2TV.Domain.Models.Alerts
@using BF2TV.Frontend.Store
@using BF2TV.Domain.Models
@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<AlertStore.State> State

<i class="btn btn-sm bi @(IsAlertActive ? "bi-bell-slash btn-outline-success" : "bi-bell btn-outline-secondary") grow"
   @onclick="Toggle"
   title="Alerts are turned @(IsAlertActive ? "on" : "off")">
</i>


@code {

    [Parameter]
    public FriendModel Friend { get; set; } = default!;

    private bool IsAlertActive
    {
        get { return State.Value.ActiveServerConditions.Any(x =>
        {
            var conditionId = ConditionId.Create<FriendIsOnServerCondition>(Friend.DisplayName);
            return x.ConditionId == conditionId;
        }); }
    }

    private void Toggle()
    {
        if (IsAlertActive)
            RemoveAlert();
        else
            AddAlert(Friend.DisplayName);
    }

    private void RemoveAlert()
    {
        var activeCondition = State.Value.ActiveServerConditions.FirstOrDefault(x =>
        {
            var conditionId = ConditionId.Create<FriendIsOnServerCondition>(Friend.DisplayName);
            return x.ConditionId == conditionId;
        });
        if (activeCondition == null)
            return;

        Dispatcher.Dispatch(new AlertStore.Actions.RemoveCondition(activeCondition));
    }

    private void AddAlert(string fullFriendName)
    {
        var condition = new FriendIsOnServerCondition(fullFriendName);
        Dispatcher.Dispatch(new AlertStore.Actions.AddCondition(condition));
    }

}