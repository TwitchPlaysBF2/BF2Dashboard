@page "/friends"
@using BF2TV.Frontend.Store.FriendList
@using BF2TV.Frontend.Store
@inherits FluxorComponent
@inject IDispatcher _dispatcher
@inject IState<FriendListState> _friendListState
@inject IState<LoadingState> _loadingState

<h3><span class="oi oi-people" aria-hidden="true"></span> Friends</h3>
<div class="m-5">
    @if (_friendListState.Value.OnlineFriendList == null)
    {
        <LoadingSpinner/>
    }
    else
    {
        <span>Online:</span>
        <div class="row p-2 ms-4">
            <ul style="list-style-type: none;">
                @foreach (var friend in _friendListState.Value.OnlineFriendList)
                {
                    <li class="m-2">
                        <i class="bi bi-circle-fill" style="color: green; font-size: 11pt;"></i>
                        @friend.DisplayName
                        <span style="font-size: 10pt; color: #767676">
                            @friend.ServerInfo.MapName @@ <a href="servers/@friend.ServerInfo.IpAndPort" style="color: slategrey">@friend.ServerInfo.ServerName</a>
                            (@friend.ServerInfo.CurrentPlayerCountWithoutBots/@friend.ServerInfo.MaxPlayerCount)
                            @if (friend.ServerInfo.JoinLink != null)
                            {
                                <a role="button" title="Join server (requires joinme.click/download)" href="@friend.ServerInfo.JoinLink" class="btn btn-dark btn-sm mx-2">
                                    <i class="bi bi-play-circle icon-in-a-button-small"></i> Join
                                </a>
                            }
                        </span>
                        <i class="btn btn-sm btn-outline-warning bi bi-person-dash grow" @onclick="() => RemoveFriend(friend)" title="Remove friend"></i>
                    </li>
                }
            </ul>
        </div>

        <span>Add new friend by name (include the prefix):</span>
        <div class="row p-2 ms-4 mb-4">
            <div class="col-auto">
                <div class="form-floating">
                    <input @bind="NewFriendName" class="form-control-sm" type="text" placeholder="Player Name" id="newFriendName">
                </div>
            </div>
            <div class="col-auto">
                <i class="btn btn-sm btn-outline-success bi bi-person-plus grow" @onclick="AddFriendByName" title="Add friend"></i>
            </div>
        </div>
    }
    @if (_friendListState.Value.OfflineFriendList != null)
    {
        <span>Offline:</span>
        <div class="row p-2 ms-4">
            <ul style="list-style-type: none;">
                @foreach (var friend in _friendListState.Value.OfflineFriendList)
                {
                    <li style="opacity: .5">
                        <i class="bi bi-circle-fill" style="color: #767676; font-size: 11pt;"></i>
                        @friend.DisplayName
                        <i class="btn btn-sm btn-outline-warning bi bi-person-dash grow" @onclick="() => RemoveFriend(friend)" title="Remove friend"></i>
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code {

    private bool _isServerDataLoaded = false;
    private string NewFriendName;

    protected override void OnInitialized()
    {
        if (!_isServerDataLoaded)
        {
            _dispatcher.Dispatch(new InitializeServerListsAction());
            _isServerDataLoaded = true;
        }

        base.OnInitialized();
    }

    private void RemoveFriend(FriendModel friend)
    {
        if (friend.Player != null)
            friend.Player.IsFriend = false;

        _dispatcher.Dispatch(new RemoveFriendAction(friend.DisplayName));
    }

    private void AddFriendByName()
    {
        _dispatcher.Dispatch(new AddFriendByNameAction(NewFriendName));
        NewFriendName = string.Empty;
        _dispatcher.Dispatch(new InitializeServerListsAction());
    }

}